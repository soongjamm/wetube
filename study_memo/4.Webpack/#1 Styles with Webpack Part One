전에 dotenv를 이용했던 것처럼, 이걸 수동으로 직접 설정해주는 방법이있다.
package.json의 스크립트 부분에서 추가.
 WEBPACK_ENV=development webpack .왜냐면 모드를 추가해주고 싶어서.
 dev가 아닌 build:assets도 추가. 이건 내 코드를 서버에 올려줌
    => WEBPACK_ENV = production

config 파일로 가서 그 ENV를 받게 한다.
여전히 실패했다고 뜨는데 그건 webpack이 css부분을 이해하지 못해서다.
그래서 rule을 줘야함
module을 만났을때 몇가지 룰을 따르도록. => config라는 obj안에 있는 array
-> webpack아 확장자 scss인 파일을 만나면 어떤 loader를 실행하거라.
-->loader란 webpack에게 파일을 처리하느 방법을 알려주는 역할. webpack은 아무것도 못함
-->loader를 추가해줘야 비로소 파일 다루는법을 알게됌
레귤러 익스프레션 써야함. 원하는 부분만 가져오기 위해서

1. 확장자가 scss파일 찾기./\.(scss)$/
2.그다음 scss파일을 찾았을때 가장 먼저 scss를 css로 바꾸고
그 css에 해당하는 텍스트 전체를 취해서(추출) css파일로 저장해야 한다.
그 추출된 css를 분리된 하나의 파일로 만든다.

extract text webpack plugin
설치시 조건을 달을건데, 가끔 어떤 라이브러리들은 더이상 사용되지 않을 예정인(deprecated) 경우가 있다.
예를 들어 개발자들이 더 쓰지마 하고 새로운 버전 배포..
-> npm에서 새로운 버전을 설치하고 싶다면 @을 쓰면 된다.

@next를 쓰자.

이제 설치한 plugin을 use하자
ExtractCSS.extract()의 괄호 안에는 css의 텍스트를 어떻게 추출하는지 적어줘야
(SCSS파일을 CSS로 바꾸는게 선행되어야 한다는 것 기억)

webpack에선 loader를 사용할때 끝에서부터 시작해서 처음으로 진행한다.
예를들어, 코드를 보면 extraction부터 먼저 할거같음. 보통 제일 위에서부터 시작하니.
하지만 config 파일에서, 아래에서 위로 실행한다. 
그래서 여기에 쓸때는 먼저 extract하는 것부터 써야하고
다음엔 CSS파일을 이해시키는 부분, 그다음에 SASS파일 다루는 부분을 적어야 함.

webpack이 이걸 실행하면 (작성할때와 반대 순서로) 먼저 scss파일 다루는것하고
다음에 css파일 다루는것 하고, 추출을 진행한다.

우리는 코드를 번역만 할게 아니라, sass에서 출발해서, 코드가 호환되게 만들고 싶음
번역 뿐만 아니라 호환성. 그러므로 loader 또 추가.

에러생기는건 다음 비됴에서~~