현재 진행상황.

routes에 있는 로직관련 코드들을 모두 userController와 videoController로 옮김
(ex. @@routes.get(routes.somewhere, join람다식... )  를 나눠서
@@routes.get(routes.somewhere, join)와
export const join = (람다..)=> res.send("something);)

----
init.js에는 app.js에서 import한 application이 있다.(app)

app관련 코드들 app.js파일에 담겨있다.
express를 import했고 express를 실행한 결과를 app 상수로 만듦
+ middleware를 추가했다. (app.use함수들)
++ cookieParser는 ㅊookie를 전달받아 사용할수 있도록 만들어주는 미들웨어
   사용자 인증같은 곳에서 쿠키를 검사할때 사용해야함.
++ bodyParser는 사용자가 웹사이트로 전달하는 정보들을 검사하는 미들웨어
   request정보에서 form이나 json형태로 된 body를 검사
   아바타의 사진이나 비디오를 업로드시, 제목이나 댓글등 정보를 전달시 form에 담아 업로드 하기 때문
++ helemt 은 app이 더 안전하게 만들어줌
++ morgan은 app에서 발생하는 모들 일들을 logging


3가지 router를 사용한다.
1.globalRouter - /home,/search,/join,/login,/logout
2.userRouter - /user/주소들
3.videoRouter - /video/주소들
주소들은 모두 routes.js에 정의해두었다. 한 파일이 바뀌면 모두 적용되도록 하기위함

모든 router의 로직들은 controller에 정의되어 있다. -> mvc의 c부분

다음 비디오에서는 pug. express에서 view를 다루는 방식중 하나.
express로 html을 보여줄수 있다. res.send 대신 실제 html
css같은걸로 꾸밀수도 있다. V부분. 아주 쉽고 express에 설치도 쉽다
html을 아주 멋져보이도록 만들어준다. 일반 html에 비해서도.

Question!
why we don't use Object for controller part like routes?
ex. globalRouter.get(routes.join, join). 'routes.join' is a member of Object, 'join' is not.
테스트 결과 object를 이용해도 동작한다.

